parameters:
- name: 'arch'
  type: string
- name: 'pool'
  type: object
  default: {}
- name: 'containerImage'
  type: string
- name: 'codeCoverage'
  type: boolean
  default: false

jobs:
- job:
  displayName: ${{ parameters.arch }}
  timeoutInMinutes: 60
  pool: ${{ parameters.pool }}

  container:
    image: ${{ parameters.containerImage }}

  steps:
  - ${{ if and(eq(parameters.arch, 'amd64'), parameters.codeCoverage) }}:
    - script: |
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        rm packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y apt-transport-https
        sudo apt-get install -y dotnet-sdk-6.0
      displayName: install .Net
  - script: |
      sudo apt-get update
      sudo apt-get install -y \
          libboost-system-dev \
          libboost-thread-dev \
          libboost-serialization-dev \
          libexplain-dev \
          libhiredis-dev \
          libnl-3-dev \
          libnl-route-3-dev \
          libnl-genl-3-dev \
          libnl-nf-3-dev \
          libevent-dev
    displayName: "Install dependencies"
  - checkout: self
    clean: true
    submodules: true
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-buildimage.common_libs
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      path: $(Build.ArtifactStagingDirectory)/download
      ${{ if eq(parameters.arch, 'amd64') }}:
        artifact: common-lib
      ${{ else }}:
        artifact: common-lib.${{ parameters.arch }}
      patterns: |
        target/debs/bullseye/libyang-*.deb
        target/debs/bullseye/libyang_*.deb
    displayName: "Download libyang from common lib"
  - script: |
      set -ex
      sudo dpkg -i $(find ./download -name *.deb)
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: "Install libyang from common lib"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-swss-common
      ${{ if eq(parameters.arch, 'amd64') }}:
        artifact: sonic-swss-common
      ${{ else }}:
        artifact: sonic-swss-common.${{ parameters.arch }}
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
      displayName: "Download sonic-swss-common"
  - script: |
      set -ex
      # LIBSWSSCOMMON
      sudo dpkg -i libswsscommon_1.0.0_${{ parameters.arch }}.deb
      sudo dpkg -i libswsscommon-dev_1.0.0_${{ parameters.arch }}.deb
    workingDirectory: $(Pipeline.Workspace)/
    displayName: 'Install libswsscommon package'
  - script: |
      rm ../*.deb
      dpkg-buildpackage -us -uc -b -j$(nproc)
      cp ../*.deb $(Build.ArtifactStagingDirectory)
    displayName: "Compile sonic dhcpmon"
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: sonic-dhcpmon.${{ parameters.arch }}
    displayName: "Archive dhcpmon debian packages"
  - ${{ if and(eq(parameters.arch, 'amd64'), parameters.codeCoverage) }}:
    - task: PublishCodeCoverageResults@1
      inputs:
        summaryFileLocation: dhcpmon-test-result.xml
        pathToSources: $(Build.SourcesDirectory)
        codeCoverageTool: 'Cobertura'
